name: PROD_CD

on:
  pull_request:
    branches:
      - main
    types:
      - closed
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: prod-bibeop-user-web
  ECS_TASK_DEFINITION: bibeop-user-web
  CONTAINER_NAME: bibeop-user-web
  ECS_SERVICE: bibeop-user-web
  ECS_CLUSTER: prod-bibeop
  IMAGE_TAG_NAME: user_web_image_tag

permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  build-and-push:
    if: ${{ (github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)) && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTION_PRD_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cache npm and next
        uses : actions/cache@v3
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 18.15.0
          
      - name: Install modules
        run: npm i

      - name: Clean Install modules
        run: npm ci

      # - name: Generate Environment Variables File for Production
      #   run: |
      #     touch .env.production
      #     echo "NEXT_PUBLIC_BASE_URL=$NEXT_PUBLIC_BASE_URL" >> .env.production
      #     echo "NEXT_PUBLIC_GOOGLE_CLIENT_ID=$NEXT_PUBLIC_GOOGLE_CLIENT_ID" >> .env.production
      #     echo "NEXT_PUBLIC_GOOGLE_CLIENT_SECRET=$NEXT_PUBLIC_GOOGLE_CLIENT_SECRET" >> .env.production
      #     echo "NEXT_PUBLIC_GOOGLE_REDIRECT_URI=$NEXT_PUBLIC_GOOGLE_REDIRECT_URI" >> .env.production
          
      #     echo "NEXT_PUBLIC_KAKAO_JS_KEY=$NEXT_PUBLIC_KAKAO_JS_KEY" >> .env.production
      #     echo "NEXT_PUBLIC_KAKAO_REST_API_KEY=$NEXT_PUBLIC_KAKAO_REST_API_KEY" >> .env.production
      #     echo "NEXT_PUBLIC_KAKAO_REDIRECT_URI=$NEXT_PUBLIC_KAKAO_REDIRECT_URI" >> .env.production
          
      #     echo "NEXT_PUBLIC_APPLE_CLIENT_ID=$NEXT_PUBLIC_APPLE_CLIENT_ID" >> .env.production
      #     echo "NEXT_PUBLIC_APPLE_REDIRECT_URI=$NEXT_PUBLIC_APPLE_REDIRECT_URI" >> .env.production
          
      #     echo "NEXT_PUBLIC_IMPORT_CODE=$NEXT_PUBLIC_IMPORT_CODE" >> .env.production
      #   env:
      #     NEXT_PUBLIC_BASE_URL: https://api.bibeop.com

      #     NEXT_PUBLIC_GOOGLE_REDIRECT_URI: https://bibeop.com/auth/google
      #     NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}
      #     NEXT_PUBLIC_GOOGLE_CLIENT_SECRET: ${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_SECRET }}
          
      #     NEXT_PUBLIC_KAKAO_REDIRECT_URI: https://bibeop.com/auth/kakao
      #     NEXT_PUBLIC_KAKAO_JS_KEY: ${{ secrets.NEXT_PUBLIC_KAKAO_JS_KEY }}
      #     NEXT_PUBLIC_KAKAO_REST_API_KEY: ${{ secrets.NEXT_PUBLIC_KAKAO_REST_API_KEY }}
          
      #     NEXT_PUBLIC_APPLE_REDIRECT_URI: https://bibeop.com/auth/apple
      #     NEXT_PUBLIC_APPLE_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_APPLE_CLIENT_ID }}

      #     NEXT_PUBLIC_IMPORT_CODE: ${{ secrets.NEXT_PUBLIC_IMPORT_CODE }}
          
      - name: Run build
        run: npm run build

      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Checkout Infra Repository
        uses: actions/checkout@v4
        with:
          path: terraform
          repository: 'bb-exchange/bb-exchange-infra'
          token: ${{ secrets.INFRA_REPO_ACCESS_TOKEN }}
          ref: stage

      - name: Update Image Tag
        env:
          IMAGE_TAG_NAME: ${{ env.IMAGE_TAG_NAME }}
          IMAGE_TAG: ${{ steps.build-image.outputs.IMAGE_TAG }}
        working-directory: terraform/root/prod
        run: |
          sed -i "s/${IMAGE_TAG_NAME} = \".*\"/${IMAGE_TAG_NAME} = \"$IMAGE_TAG\"/" prod.tfvars

      - name: Commit and Push and Create PR
        env:
          GITHUB_TOKEN: ${{ secrets.INFRA_REPO_ACCESS_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          PR_URL: ${{ github.event.pull_request.html_url }}
        working-directory: terraform/root/prod
        run: |
          git config user.name 'bibeop'
          git config user.email 'bibeop@bibeop.com'
          git add prod.tfvars
          git commit -m "deploy: update user web image tag"
          git push origin stage
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_BODY="Automated PR to deploy **[User Web]** by update image tag<br/><br/><br/>open by $PR_URL @$GITHUB_ACTOR"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            PR_BODY="Automated PR to deploy **[User Web]** by update image tag<br/><br/><br/>open by workflow_dispatch by @$GITHUB_ACTOR"
          fi
          echo "$PR_BODY" > pr-body.txt
          gh pr create --title "User Web 운영 환경 배포" --body-file pr-body.txt --base main --head stage

      - name: CD notification to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          author_name: User web CD
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
